@model LILI_CRM.Web.Areas.PCV.ViewModel.InvoiceModel
@using (Ajax.BeginForm("Edit", "Invoice", null,
        new AjaxOptions
        {
            UpdateTargetId = "updateTargetId",
            InsertionMode = InsertionMode.Replace,
            HttpMethod = "POST",
            OnSuccess = "EditInvoiceSuccess",
        }, new { @id = "editInvoiceForm" }))
{


    <div class="row-fluid form-horizontal">
        <div class="left popup-widget-box clearfix">
            <div class="content">
                @Html.ValidationSummary(true)
                <div id="updateTargetId" class="alert alert-info" style="display: none;">
                </div>
                @Html.HiddenFor(model => model.Id)
            </div>

            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span4 ">
                        @Html.LabelFor(model => model.SupplierId)
                    </span>
                    <span class="span8">
                        @Html.DropDownList("SupplierId", Model.ddlSupplier, new { @class = "clsSupplier" })
                        @Html.ValidationMessageFor(model => model.SupplierId)
                    </span>
                </div>
                <div class="span6 pull-left">
                    <span class="span4">
                        @Html.LabelFor(model => model.DebitNoteDate)
                    </span>
                    <span class="span8">
                        @Html.EditorFor(model => model.DebitNoteDate)
                        @Html.ValidationMessageFor(model => model.DebitNoteDate)
                    </span>
                </div>

            </div>

            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span4 ">
                        @Html.LabelFor(model => model.SupplierAddress)
                    </span>
                    <span class="span8">
                        @Html.TextBoxFor(model => model.SupplierAddress, new { Style = "background:#e0eee0", @disabled = "disabled" })  
                    </span>
                </div>
                <div class="span6 pull-left">
                    <span class="span4">
                        @Html.LabelFor(model => model.DebitNoteNo)
                    </span>
                    <span class="span8">
                        @Html.TextBoxFor(model => model.DebitNoteNo, new { @style = "text-align: left !important;" })
                        @Html.ValidationMessageFor(model => model.DebitNoteNo)

                    </span>
                </div>
            </div>

            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span4 ">
                        @Html.LabelFor(model => model.AttentionPerson)
                    </span>
                    <span class="span8">
                        @Html.TextBoxFor(model => model.AttentionPerson, new { Style = "background:#F0F0F0", @disabled = "disabled" })  
                    </span>
                </div>
            </div>


            <div class="row-fluid">
                <div id="InvoiceDetailsGridZone">
                    <div id="InvoiceDetailsEditKendoGrid">
                    </div>
                </div>
            </div>

            <div class="hr"></div>
            &nbsp; 
            &nbsp;
            
            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span4 ">
                        GT
                        Please remit our commission USD                -to the below Bank Account No. 
                    </span>
                    <span class="span8">
                    </span>
                </div>
            </div>

            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span4">
                        @Html.LabelFor(model => model.BankId)
                    </span>
                    <span class="span8">
                        @Html.DropDownList("BankId", Model.ddlBank, new { @class = "clsBank" })
                        @Html.ValidationMessageFor(model => model.BankId)
                    </span>
                </div>
            </div>

            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span4">
                        @Html.LabelFor(model => model.BankAddress)
                    </span>
                    <span class="span8">
                        @Html.TextBoxFor(model => model.BankAddress, new { Style = "background:#F0F0F0", @disabled = "disabled" })  
                    </span>
                </div>
            </div>

            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span4">
                        @Html.LabelFor(model => model.AccountNo)
                    </span>
                    <span class="span8">
                        @Html.TextBoxFor(model => model.AccountNo, new { Style = "background:#F0F0F0", @disabled = "disabled" }) 
                    </span>
                </div>
            </div>

            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span4">
                        @Html.LabelFor(model => model.SwiftCode)
                    </span>
                    <span class="span8">
                        @Html.TextBoxFor(model => model.SwiftCode, new { Style = "background:#F0F0F0", @disabled = "disabled" }) 
                    </span>
                </div>
            </div>
    
            
            <div class="row-fluid">
            <div class="hr"> </div>
                <div class="content pull-right">
                    <button type="button" class="btn btn-mini btn-primary" id="btnPrepsreInvoiceDetailList" name="btnPrepsreInvoiceDetailList"
                        onclick="PreSaveInvoiceDetails()">
                        <i class="icon-save bigger-125"></i>Prepare List</button>

                    <button type="submit" class="btn btn-mini btn-primary" id="btnEditInvoice" name="btnEditInvoice">
                        <i class="icon-save bigger-125"></i>Edit</button>
                        &nbsp;&nbsp;
                    <button type="button" class="btn btn-mini btn-primary" id="btnCancelInvoice" name="btnCancelInvoice"         value="Cancel" onclick=" $($('#editInvoiceDialog').dialog('close'));">
                            <i class="icon-remove bigger-125"></i>Cancel</button>
                </div>
            </div>
        </div>
    </div>
    
}
@*<script src="@Url.Content("~/Scripts/App/Invoice.js")" type="text/javascript"></script>*@





@*  Invoice Detail Kendo Grid start *@
<script type="text/javascript">
    // Kendo Data Source
    var dataSource = new kendo.data.DataSource({
        pageSize: 20,
        height: 400,
        update: function (e) { return true; },
        type: "json",
        transport: {
            read: "/PCV/Invoice/GetInvoiceDetails"
        },

        schema: {
            model: {
                id: "Id",
                fields: {
                    Id: { type: "number", editable: false }, ProductId: { type: "number", editable: false },
                    ProductName: { type: "string", editable: false },
                    GenericName: { type: "string", editable: false },
                    HSCode: { type: "string", editable: false },
                    Origin: { type: "string", editable: false },
                    SellingUnit: { type: "string", editable: false },
                    UnitPrice: { type: "number", validation: { required: true, min: 1, max: 9999999999} },
                    Quantity: { type: "number", editable: true, validation: { required: true, min: 1, max: 9999999999} },
                    SubTotal: { type: "number", locked: true, validation: { max: 9999999999} }
                }
            }
        },
        aggregate:
    [
        { field: "SubTotal", aggregate: "sum"} //,
        //{ field: "Commission", aggregate: "sum" }
    ]
    });

    // Kendo Krid Initialize
    $("#InvoiceDetailsEditKendoGrid").kendoGrid({
        dataSource: dataSource,
        height: 300,
        filterable: false,
        groupable: true,
        sortable: true,
        resizable: true,
        //editable: "incell",
        columnMenu: false,
        //scrollable: true,
        columns: [
                { field: "Id", title: "Id", width: 100, hidden: true, filterable: false, sortable: false, locked: true },
                { field: "ProductId", title: "Product Id", width: 100, hidden: true, filterable: false, sortable: false, locked: true },
                { field: "ProductName", title: "Product Name", width: 200, filterable: false, sortable: false, locked: true },
                { field: "GenericName", title: "Generic Name", width: 150, filterable: false, sortable: false, locked: true },
                { field: "HSCode", title: "HS Code", width: 80, filterable: false, sortable: false, locked: true },
                { field: "Origin", title: "Origin", width: 80, filterable: false, sortable: false, locked: true },
                { field: "SellingUnit", title: "Unit", width: 80, filterable: false, sortable: false, locked: true },
                { field: "UnitPrice", title: "Unit Price", editable: true, format: "{0:n}", width: 80, sortable: false, locked: false, groupable: false, attributes: { style: "text-align:right;"} },
                { field: "Quantity", title: "Quantity", editable: true, format: "{0:n}", width: 80, locked: false, sortable: false, groupable: false, attributes: { style: "text-align:right;"} },
                { field: "SubTotal", editor: function (container, options) { $("<span>" + options.model.SubTotal + "</span>").appendTo(container); }, title: "Sub Total", format: "{0:n}", sortable: false, filterable: false, groupable: false, width: 80, attributes: { style: "text-align:right;" }, footerTemplate: "<div style='float: right'>#= sum #</div>" },
                { command: "destroy", title: " ", width: 100 }
            ],
        navigatable: false
    , editable: true
    , save: function (data) {
        if (data.values.Quantity) {
            var test = data.model.set("SubTotal", (data.model.UnitPrice * data.values.Quantity));

            var dataSource = this.dataSource;
            data.model.one("change", function () {
                dataSource.one("change", function () {
                    dataSource.aggregates().SubTotal.sum
                });
                dataSource.fetch();
            });
        }

        else if (data.values.UnitPrice) {
            var test = data.model.set("SubTotal", (data.model.Quantity * data.values.UnitPrice));
            //var test2 = data.model.set("Commission", (data.model.SubTotal * data.model.CommissionPer / 100));
        }
        // Else If End here 
    }
    });

    // For Header Formatting
    //function onDataBound(arg) {

    //    //    var myElem = document.getElementById('trParentHeaderAdd');
    //    //    if (myElem == null) {

    //    //        $("#InvoiceDetailsKendoGrid").find("th.k-header").parent()
    //    //            .after("<tr id='trParentHeaderAdd' >  <th colspan='4' class='k-header' style='background-color:tomato;'></th>   <th colspan='4' class='k-header' style='background-color:tomato; font-weight: bold; font-size: 14px;'>January</th>     <th colspan='4' class='k-header' style='background-color:tomato; font-weight: bold; font-size: 14px;'>February</th>      <th colspan='4' class='k-header' style='background-color:tomato; font-weight: bold; font-size: 14px;'>March</th>        <th colspan='4' class='k-header' style='background-color:tomato; font-weight: bold; font-size: 14px;'>April</th>      <th colspan='4' class='k-header' style='background-color:tomato; font-weight: bold; font-size: 14px;'>May</th>        <th colspan='4' class='k-header' style='background-color:tomato; font-weight: bold; font-size: 14px;'>June</th>     <th colspan='4' class='k-header' style='background-color:tomato; font-weight: bold; font-size: 14px;'>July</th>      <th colspan='4' class='k-header' style='background-color:tomato; font-weight: bold; font-size: 14px;'>August</th>     <th colspan='4' class='k-header'style='background-color:tomato; font-weight: bold; font-size: 14px;'>September</th>     <th colspan='4' class='k-header' style='background-color:tomato; font-weight: bold; font-size: 14px;'>October</th>   <th colspan='4' class='k-header'style='background-color:tomato; font-weight: bold; font-size: 14px;'>November</th>     <th colspan='4' class='k-header' style='background-color:tomato; font-weight: bold; font-size: 14px;'>December</th>    <th colspan='1' class='k-header' align='centre'></th>   </tr>");
    //    //    }

    //}
    //Invoice Detail Kendo Grid End Here 
    //-----------------------------------------------------
</script>

@*Add New Row to Grid*@
<script type="text/javascript">
    // Add New Row To Grid
    function AddRow()
        {
        var invoiceDetGrid = $('#InvoiceDetailsKendoGrid').data('kendoGrid');
        var dataSource = invoiceDetGrid.dataSource;

        var product = $('#Product').val();

        $.get(
                "@Url.Action("AddProductToGrid")",
                {'product':product},
                function(jresult){
                    if(jresult != '')
                    {
                        if (Find_Grid_Item(jresult[0].Id))
                        {
                            alert('This Element is Allready Exists');
                            return;
                        }
                        //alert (jresult[0].Id);
                        dataSource.add({ ProductId: jresult[0].Id, 
                            ProductName: jresult[0].ProductName, GenericName: jresult[0].GenericName, HSCode: jresult[0].HSCode, 
                            Origin: jresult[0].Origin, SellingUnit: jresult[0].SellingUnit,
                            UnitPrice: jresult[0].UnitPrice,  
                            Quantity: 1, 
                            SubTotal: jresult[0].UnitPrice,  
                            Discontinued: false 
                            });
                        }
                        else{
                            $("#message").show();
                            $('#message').text(data).css({ 'color':'red' });
                            $("#message").delay(3000).hide();
                        }
                        $('#Product').val('');
                        //Calculate_Grid_Total();
                    }
                );
        }
    // Add New Row To Grid End Here 


    function Find_Grid_Item(itemId)
    {
            //alert (itemId);
        var rowNo =0;
        var gridData = $("#InvoiceDetailsKendoGrid").data("kendoGrid").dataSource.data();

        for (var index = 0; index < gridData.length; index++) 
        {
            
            var currentDataItem = gridData[index];
            if (itemId==currentDataItem.ProductId)
            {
                rowNo=index;
                return true;
            }
        }
    }

        $('#OtherCharges').on('change',function(){
           
        var TotalSum=0.00, NetSum=0.00, OtherCharges=0.00;  
        TotalSum =  $('#Total').val();
        OtherCharges =  $('#OtherCharges').val();
        NetSum = parseFloat(TotalSum) + parseFloat(OtherCharges);
        $('#NET').val(NetSum);

          });


    function Calculate_Grid_Total() 
    {
        
        var TotalSum=0.00, NetSum=0.00, OtherCharge=0.00;
        var gridData = $("#InvoiceDetailsKendoGrid").data("kendoGrid").dataSource.data();

        for (var i = 1; i < gridData.length; i++)
        {
            var currentDataItem = gridData[i];
            TotalSum = TotalSum+currentDataItem.SubTotal;           
        }
        $('#Total').val(TotalSum);
        OtherCharge =  $('#OtherCharges').val();
        NetSum = TotalSum + OtherCharge;
        $('#NET').val(NetSum);
    }
    // Add New Row To Grid End Here 


</script>

@*Calculate Commission *@
<script type="text/javascript">
    // CalculateCommission
    function CalculateCommission() {

        var commCalcTypeId = $('#CommCalcTermId').val();
        var commPercent = $('#CommissionPer').val();
        var commissionTotal = 0.00;

        var totalQuantity = $('#NET').val();
        var totalSum = $('#Total').val();
        var net = $('#NET').val();

        if (commCalcTypeId == 1) {
            commissionTotal = parseFloat(commPercent) * parseFloat(totalSum) / 100;
        }
        else if (commCalcTypeId == 2) {
            commissionTotal = parseFloat(commPercent) * parseFloat(net) / 100;
        }
        else {
            commissionTotal = parseFloat(commPercent) * parseFloat(totalQuantity);
        }
        alert(commissionTotal);
        $('#Commission').val(commissionTotal);

    }
    // Calculate Commission End Here 




    $('#CommissionPer').on('change', function () {

        var commCalcTypeId = $('#CommCalcTermId').val();
        var commPercent = $('#CommissionPer').val();
        var commissionTotal = 0.00;

        var totalQuantity = $('#NET').val();
        var totalSum = $('#Total').val();
        var net = $('#NET').val();

        if (commCalcTypeId == 1) {
            commissionTotal = parseFloat(commPercent) * parseFloat(totalSum) / 100;
        }
        else if (commCalcTypeId == 2) {
            commissionTotal = parseFloat(commPercent) * parseFloat(net) / 100;
        }
        else {
            commissionTotal = parseFloat(commPercent) * parseFloat(totalQuantity);
        }
        alert(commissionTotal);
        $('#Commission').val(commissionTotal);

    });

</script>

@*Save Grid Data*@
<script type="text/javascript">

    function SaveInvoiceDetails() {
        //var TotalSum = 0, NetSum = 0, OtherCharge = 0;
        var TotalSum = 0.00, NetSum = 0.00, OtherCharge = 0.00;

        //getting json data from kendo Grid
        var gridData = $("#InvoiceDetailsKendoGrid").data("kendoGrid").dataSource.data();
        var invoiceDetailViewModelList = [];

        //loop through each json data from kendo Grid
        for (var i = 0; i < gridData.length; i++) {

            var currentDataItem = gridData[i];

            var invoiceDetailViewModel = {};
            invoiceDetailViewModel.InvoiceId = "";    //currentDataItem.InvoiceId;
            invoiceDetailViewModel.ProductId = currentDataItem.ProductId;
            invoiceDetailViewModel.UnitPrice = currentDataItem.UnitPrice;
            invoiceDetailViewModel.Quantity = currentDataItem.Quantity;
            invoiceDetailViewModel.SubTotal = currentDataItem.SubTotal;
            invoiceDetailViewModelList.push(invoiceDetailViewModel);

            TotalSum = TotalSum + currentDataItem.SubTotal;
        }

        $('#Total').val(TotalSum);
        NetSum = TotalSum;
        OtherCharge = $('#OtherCharges').val();
        $('#NET').val(NetSum);

        var postUrl = '@Url.Content("~/PCV/Invoice/SetInvoiceDetailsListForSave")';
        //alert(postUrl);
        var paramValue = JSON.stringify({ lstInvoiceDetails: invoiceDetailViewModelList });
        alert(paramValue);

        //Post json data from kendo Grid to Controller
        $.ajax({
            url: postUrl,
            type: 'POST',
            dataType: 'json',
            data: paramValue,
            contentType: 'application/json; charset=utf-8',
            success: function (result) {
                console.log(result);
            },
            error: function (objAjaxRequest, strError) {
                var respText = objAjaxRequest.responseText;
                console.log(respText);
            }
        });
    }

    function PreSaveInvoiceDetails() {

        SaveInvoiceDetails();

    }
</script>

@*On Document Ready*@
<script type="text/javascript">
    $(document).ready(function () {

        $("#Product").kendoAutoComplete({
            dataTextField: "ProductCode",
            dataSource: {
                transport: {
                    read: {
                        url: "/PCV/Invoice/PopulateProductAutoComplete/",
                        serverPaging: true,
                        type: "POST",
                        data: {
                        // json: JSON.stringify([{"ProductCode": "A001"}, {"ProductCode": "A002"}] )
                    }
                }
            }
        }
    });

    //    $("input:submit, input:button, button", ".jqUI").button();
    //    $('.date').datepicker({ dateFormat: "dd/mm/yy" });

});

</script>



<script type="text/javascript">
    $(function () {
        $('#CustomerId').on('change',function(){
            
            $('#CustomerAddress').val("");
            $('#Phone').val("");
            $('#Email').val("");
            $('#TIN').val("");
            $('#BIN').val("");

            var custId = $(this).val();

            if(custId == "0")
            {
               return;
            }
            $.get(
                    "@Url.Action("GetCustomerDetails")",
                    {'id':custId},
                    function(jresult){
                        if(jresult != ''){
                             $('#CustomerAddress').val(jresult[0].Address1);
                             $('#Phone').val(jresult[0].Phone);
                             $('#Email').val(jresult[0].Email);
                             $('#TIN').val(jresult[0].TIN);
                             $('#BIN').val(jresult[0].BIN);
                        }
                        else{
                            $("#message").show();
                            $('#message').text(data).css({ 'color':'red' });
                            $("#message").delay(3000).hide();
                        }
                    }
                );

        });
    });

</script>

