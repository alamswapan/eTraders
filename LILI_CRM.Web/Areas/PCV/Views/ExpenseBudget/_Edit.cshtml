@model LILI_CRM.Web.Areas.PCV.ViewModel.ExpenseBudgetModel
@using (Ajax.BeginForm("Edit", "ExpenseBudget", null,
        new AjaxOptions
        {
            UpdateTargetId = "updateTargetId",
            InsertionMode = InsertionMode.Replace,
            HttpMethod = "POST",
            OnSuccess = "EditExpenseBudgetSuccess",
        }, new { @id = "editExpenseBudgetForm" }))
{
    <div class="row-fluid form-horizontal">
        <div class="popup-widget-box clearfix">
            <div class="content">
                @Html.ValidationSummary(true)
                <div id="updateTargetEditId" class="alert alert-info" style="display: none;">
                </div>                
            </div>  
            
             @Html.HiddenFor(model => model.Id)
             @Html.HiddenFor(model => model.SalesPersonId)

            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span3">
                        @Html.LabelFor(model => model.SalesPersonName)
                    </span>
                    <span class="span9 pull-left">
                        @Html.EditorFor(model => model.SalesPersonName)
                        @Html.ValidationMessageFor(model => model.SalesPersonName)
                    </span>
                </div>
            </div>

            <div class="row-fluid">
			    <div class="span6 pull-left">
                    <span class="span3">
                        @Html.LabelFor(model => model.DivisionId)
                    </span>
                    <span class="span9 pull-left">
                        @Html.DropDownList("DivisionId", Model.ddlDivision, new { @class = "clsDivision", Style = "background:#FFFFFF"})
                        @Html.ValidationMessageFor(model => model.DivisionId)
                    </span>
                </div>   
            </div> 

            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span3">
                        @Html.LabelFor(model => model.SBUId)
                    </span>
                    <span class="span9 pull-left">
                        @Html.DropDownList("SBUId", Model.ddlSBU, new { @class = "clsSUB" ,Style = "background:#FFFFFF"})
                        @Html.ValidationMessageFor(model => model.SBUId)
                    </span>
                </div>
            </div> 
			
			<div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span3">
                        @Html.LabelFor(model => model.BudgetYear)
                    </span>
                    <span class="span9 pull-left">
                        @Html.EditorFor(model => model.BudgetYear)
                        @Html.ValidationMessageFor(model => model.BudgetYear)
                    </span>
                </div> 
            </div>            
      

            <div class="row-fluid">
			    <span class="span5 pull-left">
                    @*<div id="SampleRequestAddItemButtonZone" class="row-fluid">*@
                        <button type="button" class="btn btn-mini btn-primary" id="btnAddCustomer" name="btnAddCustomer"
                        value="Cancel" onclick="AddRow()">
                        <i class="icon-edit bigger-125"></i>Add to List</button>
                    @*</div>*@
                </span>
		    </div>

            <div class="row-fluid">
                <div id="ExpenseBudgetDetailsGridZone">
                    <div id="ExpenseBudgetDetailsEditKendoGrid">
                    </div>
                </div>
            </div>

        <div class="hr"></div>	

        
        <div class="content pull-right"> 
		
		<button type="button" onclick="UpdateExpenseBudget()" class="btn btn-mini btn-primary" id="btnExpenseBudgetDetailList" name="btnExpenseBudgetDetailList">
            <i class="icon-save bigger-125"></i>Save</button>
            &nbsp;&nbsp;
            <button type="button" class="btn btn-mini btn-primary" id="btnCancelExpenseBudget" name="btnCancelExpenseBudget"
                value="Cancel" onclick=" $($('#editExpenseBudgetDialog').dialog('close'));">
                <i class="icon-remove bigger-125"></i>Cancel</button>
        </div>


      </div>
        
    </div>
}


@*  SampleSubmission Detail Kendo Grid start *@
<script type="text/javascript">

//    var modalId = @Model.Id;
//    alert(modalId);

//    var html = "<tr id='trParentHeaderEdit'>  <th colspan='1' class='k-header'><strong></strong></th> <th colspan='1' class='k-header'><strong></strong></th>  <th colspan='3' class='k-header'><strong>January</strong></th> <th colspan='3' class='k-header'><strong>February</strong></th> <th colspan='3' class='k-header'><strong>March</strong></th> <th colspan='3' class='k-header'><strong>April</strong></th> <th colspan='3' class='k-header'><strong>May</strong></th><th colspan='3' class='k-header'><strong>Jun</strong></th><th colspan='3' class='k-header'><strong>July</strong></th><th colspan='3' class='k-header'><strong>Augest</strong></th><th colspan='3' class='k-header'><strong>September</strong></th><th colspan='3' class='k-header'><strong>October</strong></th><th colspan='3' class='k-header'><strong>November</strong></th><th colspan='3' class='k-header'><strong>December</strong></th> </tr>";

//  function onDataBoundEdit(arg) {
//    var myElem = document.getElementById('trParentHeaderEdit');
//    if (myElem == null){
//        $("#SalesBudgetDetailsEditKendoGrid").find("th.k-header").parent().before(html);
//        }
//      }

    var dataSource = new kendo.data.DataSource({
        pageSize: 20,
        height: 400,
        update: function (e) { return true; },
        type: "json",
        transport: {
            read: "/PCV/ExpenseBudget/GetExpenseBudgetDetails"
        },

        schema: {
            model: {
                id: "Id",
                fields: {
                ParticularId: { type: "number", editable: true },
                ParticularName: { defaultValue: { ParticularId: 0, ParticularName: "- Select One -"} },                             
				JanVal: { type: "string", editable: true },				
				FebVal: { type: "string", editable: true },				
				MarVal: { type: "string", editable: true },
				AprVal: { type: "string", editable: true },				
				MayVal: { type: "string", editable: true },				
				JunVal: { type: "string", editable: true },
				JulyVal: { type: "string", editable: true },
				AugVal: { type: "string", editable: true },				
				SepVal: { type: "string", editable: true },
				OctVal: { type: "string", editable: true },
				NovVal: { type: "string", editable: true },
				DecVal: { type: "string", editable: true }
                }
            }
        }
    });


    $("#ExpenseBudgetDetailsEditKendoGrid").kendoGrid({
        dataSource: dataSource,
        resizable: true,
        height: 350,
        scrollable: true,
        //  toolbar: ["create"],
        filterable: false,
        groupable: true,
        sortable: true,
        resizable: true,
        height: 350,
        editable: "incell",
        columnMenu: false,
        scrollable: true,
        columns: [
                { field: "ParticularId", title: "ParticularId", width: 200, hidden:true, filterable: false, sortable: false, locked: true },
                { field: "ParticularName", title: "Particulars", width: 120, editor: ParticularDropDownEditor },								
				{ field: "JanVal", title: "Jan", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "FebVal", title: "Feb", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "MarVal", title: "Mar", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "AprVal", title: "Apr", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "MayVal", title: "May", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "JunVal", title: "Jun", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "JulyVal", title: "July", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "AugVal", title: "Aug", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "SepVal", title: "Sep", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "OctVal", title: "Oct", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "NovVal", title: "Nov", width: 100, filterable: false, sortable: false, locked: true },
				{ field: "DecVal", title: "Dec", width: 100, filterable: false, sortable: false, locked: true },
                { command: "destroy", title: " ", width: 100}],
        navigatable: false,
        editable: true
    });


    function AddRow() {
        var sampleRequestDetGrid = $('#ExpenseBudgetDetailsEditKendoGrid').data('kendoGrid');
        var dataSource = sampleRequestDetGrid.dataSource;

        var articleCode = 'addrow';
        if (articleCode != '') {
            dataSource.add({
                ParticularName : "- Select One -"
            });
        }
        else {
            $("#message").show();
            $('#message').text(data).css({ 'color': 'red' });
            $("#message").delay(3000).hide();
        }
    }
    // Add New Row To Grid End Here 


    
    // Particular DropDown In Grid
    function ParticularDropDownEditor(container, options) {

     $('<input required data-text-field="ParticularName" data-value-field="Id" data-bind="value:' + options.field + '"/>')
           .appendTo(container)
           .kendoDropDownList({
               autoBind: false,
               optionLabel: "...Select...",
               dataTextField: "ParticularName",
               dataValueField: "ParticularId",
               dataSource: {
                   type: "json",
                   transport: {
                       read: "/PCV/ExpenseBudget/ReadParticularList"
                   }
               },
               change: function (e) {
                   var dataItem = e.sender.dataItem();
                   options.model.set("ParticularName", dataItem.ParticularName);
                   options.model.set("ParticularId", dataItem.ParticularId);
               }
           });
    }

    
       //Update Expense Budget

       function UpdateExpenseBudget() {
           //getting json data from kendo Grid
           var gridData = $("#ExpenseBudgetDetailsEditKendoGrid").data("kendoGrid").dataSource.data();
           var expenseMasterList = [];
           var expenseDetailList = [];
            
           
           var ExpenseBudgetMasterViewModel = {};
           var id = @Model.Id;
           ExpenseBudgetMasterViewModel.SalesPersonId = $('#SalesPersonId').val();
           ExpenseBudgetMasterViewModel.DivisionId = $('#DivisionId').val();
		   ExpenseBudgetMasterViewModel.SBUId = $('#SBUId').val();
		   ExpenseBudgetMasterViewModel.BudgetYear = $('#BudgetYear').val();
           expenseMasterList.push(ExpenseBudgetMasterViewModel);



           //loop through each json data from kendo Grid		
           for (var i = 0; i < gridData.length; i++) {

               var currentDataItem = gridData[i];

               console.log(currentDataItem);

               var ExpenseBudgetDetailViewModel = {};
               ExpenseBudgetDetailViewModel.ParticularId = currentDataItem.ParticularId;

               ExpenseBudgetDetailViewModel.JanVal = currentDataItem.JanVal;

               ExpenseBudgetDetailViewModel.FebVal = currentDataItem.FebVal;

               ExpenseBudgetDetailViewModel.MarVal = currentDataItem.MarVal;

               ExpenseBudgetDetailViewModel.AprVal = currentDataItem.AprVal;

               ExpenseBudgetDetailViewModel.MayVal = currentDataItem.MayVal;

               ExpenseBudgetDetailViewModel.JunVal = currentDataItem.JunVal;

               ExpenseBudgetDetailViewModel.JulyVal = currentDataItem.JulyVal;

               ExpenseBudgetDetailViewModel.AugVal = currentDataItem.AugVal;

               ExpenseBudgetDetailViewModel.SepVal = currentDataItem.SepVal;

               ExpenseBudgetDetailViewModel.OctVal = currentDataItem.OctVal;

               ExpenseBudgetDetailViewModel.NovVal = currentDataItem.NovVal;

               ExpenseBudgetDetailViewModel.DecVal = currentDataItem.DecVal;

               expenseDetailList.push(ExpenseBudgetDetailViewModel);
           }

           //url
           var postUrl = '@Url.Content("~/PCV/ExpenseBudget/SetExpenseBudgetForUpdate")';

           

           //Post json data from kendo Grid to Controller
           $.ajax({
               url: postUrl,
               type: 'POST',
               dataType: 'json',
               data: JSON.stringify({ 'lstExpenseBudgetMaster': expenseMasterList, 'lstExpenseBudgetDetails': expenseDetailList,'UpdateId':id }),
               contentType: 'application/json; charset=utf-8',
               success: function (result) {                  
                           
                   if (result != '') {
                           $("#updateTargetEditId").html(result.strMessage).show(); 
                           var dGrid = $('#ExpenseBudgetKendoGrid').data('kendoGrid');
                           dGrid.dataSource.read();                      
                   }


                   console.log(result);
               },
               error: function (objAjaxRequest, strError) {
                   var respText = objAjaxRequest.responseText;
                   console.log(respText);
               }
           });
       }



 
</script>







