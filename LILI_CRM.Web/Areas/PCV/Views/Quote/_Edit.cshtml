@model LILI_CRM.Web.Areas.PCV.ViewModel.QuoteModel
@using (Ajax.BeginForm("Edit", "Quote", null,
        new AjaxOptions
        {
            UpdateTargetId = "updateTargetId",
            InsertionMode = InsertionMode.Replace,
            HttpMethod = "POST",
            OnSuccess = "EditQuoteSuccess",
        }, new { @id = "editQuoteForm" }))
{
    <div class="row-fluid form-horizontal">
        <div class="popup-widget-box clearfix">
            <div class="content">
                @Html.ValidationSummary(true)
                <div id="updateTargetId" class="alert alert-info" style="display: none;">
                </div>
                @Html.HiddenFor(model => model.Id)
            </div>
            
            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span3">
                        @Html.LabelFor(model => model.QuoteDate)
                    </span>
                    <span class="span9 pull-left">
                        @Html.EditorFor(model => model.QuoteDate)
                        @Html.ValidationMessageFor(model => model.QuoteDate)
                    </span>
                </div>
                <div class="span6 pull-left">
                    <span class="span3">
                        @Html.LabelFor(model => model.CustomerId)
                    </span>
                    <span class="span9 pull-left">
                        @Html.DropDownList("CustomerId", Model.ddlCustomer, new { @class = "clsCustomerId" })
                        @Html.ValidationMessageFor(model => model.CustomerId)
                        @*@Html.DropDownList("CusContactId", Model.ddlContactPerson, new { @class = "clsCusContactId"})
                        @Html.ValidationMessageFor(model => model.CusContactId)*@
                    </span>
                </div> 
            </div>


            <div class="row-fluid">
                <div class="span6 pull-left">
                    <span class="span3">
                        @Html.LabelFor(model => model.ArticleCode)
                    </span>
                    <span class="span4 pull-left">
                        @Html.TextBoxFor(model => model.ArticleCode, new { @style = "text-align: left !important;" })
                        @Html.ValidationMessageFor(model => model.ArticleCode)
                    </span>
                    <span class="span5 pull-left">
                        @*<div id="QuoteAddItemButtonZone" class="row-fluid">*@
                            <button type="button" class="btn btn-mini btn-primary" id="btnAddArticle" name="btnAddArticle"
                            value="Cancel" onclick="AddRow()">
                            <i class="icon-edit bigger-125"></i>Add to List</button>
                        @*</div>*@
                    </span>
                </div>
                
            </div> 



            <div class="row-fluid">
                <div id="QuoteDetailsGridZone">
                    <div id="QuoteDetailsEditKendoGrid">
                    </div>
                </div>
            </div>
        
            


            <div class="hr"></div>
            &nbsp
           




            <div class="hr"></div>

            <div class="content pull-right">
                <button type="button" class="btn btn-mini btn-primary" id="btnPrepsreQuoteDetailList" name="btnPrepsreQuoteDetailList"
                    onclick="PreSaveQuoteDetails()">
                    <i class="icon-save bigger-125"></i>Prepare List</button>

                <button type="submit" class="btn btn-mini btn-primary" id="btnEditQuote" name="btnEditQuote">
                    <i class="icon-save bigger-125"></i>Edit</button>
                &nbsp;&nbsp;
                <button type="button" class="btn btn-mini btn-primary" id="btnCancelQuote" name="btnCancelQuote"
                    value="Cancel" onclick=" $($('#editQuoteDialog').dialog('close'));">
                    <i class="icon-remove bigger-125"></i>Cancel</button>
            </div>
        </div>
    </div>
}


@*  Quote Detail Kendo Grid start *@
<script type="text/javascript">

    var dataSource = new kendo.data.DataSource({
        pageSize: 20,
        height: 400,
        update: function (e) { return true; },
        type: "json",
        transport: {
            read: "/PCV/Quote/GetQuoteDetails"
        },

        schema: {
            model: {
                id: "Id",
                fields: {
                    Id: { type: "number", editable: false },
                    QuoteId: { type: "number", editable: false },
                    ArticleId: { type: "number", editable: false },
                    ArticleName: { type: "string", editable: false },
                    BaseUnit: { type: "string", editable: false },
                    MOQ: { type: "number", editable: true, validation: { required: true, min: 1, max: 9999999999} },
                    ValidityDate: { type: "date", editable: true },
                    SupplierId: { type: "number", editable: true },
                    SupplierName: { defaultValue: { SupplierId: 0, SupplierName: "- Select One -"} },
                    PriceTermId: { type: "number", editable: true },
                    PriceTermName: { defaultValue: { PriceTermId: 0, PriceTermName: "- Select One -"} },
                    CountryName: { defaultValue: { ShipmentCountryId: 0, CountryName: "- Select One -"} },
                    DetailText: { type: "string", editable: true }
                    //ActionLink: { type: "string" }
                }
            }
        }
    });


    $("#QuoteDetailsEditKendoGrid").kendoGrid({
        dataSource: dataSource,
        resizable: true,
        height: 350,
        scrollable: true,
        //  toolbar: ["create"],
        filterable: false,
        groupable: true,
        sortable: true,
        resizable: true,
        height: 350,
        //editable: true,
        editable: "incell",
        columnMenu: false,
        scrollable: true,
        columns: [
                 { field: "Id", title: "Id", width: 100, hidden: true, filterable: false, sortable: false, locked: true },
                { field: "QuoteId", title: "Quote Id", width: 100, hidden: true, filterable: false, sortable: false, locked: true },
                { field: "ArticleId", title: "Article Id", width: 100, hidden: true, filterable: false, sortable: false, locked: true },
                { field: "ArticleName", title: "Article Name", width: 200, filterable: false, sortable: false, locked: true },
                { field: "BaseUnit", title: "Unit", width: 80, filterable: false, sortable: false, locked: true },
                { field: "MOQ", title: "MOQ", format: "{0:n}", width: 120, sortable: false, locked: false, groupable: false, attributes: { style: "text-align:right;"} },
                { field: "ValidityDate", title: "Validity", format: "{0: dd/MM/yyyy}", width: 120, filterable: false, sortable: false, locked: true },
                { field: "SupplierId", title: "Supplier Id", width: 200, hidden: true, filterable: false, sortable: false, locked: true },
                { field: "SupplierName", title: "Supplier", width: 400, editor: supplierDropDownEditor },
                { field: "PriceTermId", title: "PriceTermId", width: 200, hidden: true, filterable: false, sortable: false, locked: true },
                { field: "PriceTermName", title: "PriceTerm", width: 120, editor: priceTermDropDownEditor },
                { field: "CountryName", title: "Origin", width: 120, editor: shipmentCountryDropDownEditor },
                { field: "ShipmentLeadTime", title: "ShipmentLeadTime", width: 100, filterable: false, sortable: false, locked: true },
                { field: "DetailText", title: "Remarks", width: 300, filterable: false, sortable: false, locked: true },
                { command: "destroy", title: " ", width: 100}],
        navigatable: false,
        editable: true
    });


    // Supplier DropDown In Grid
    function supplierDropDownEditor(container, options) {

        $('<input required data-text-field="SupplierName" data-value-field="SupplierId" data-bind="value:' + options.field + '"/>')
           .appendTo(container)
           .kendoDropDownList({
               autoBind: false,
               optionLabel: "...Select...",
               dataTextField: "SupplierName",
               dataValueField: "SupplierId",
               dataSource: {
                   type: "json",
                   transport: {
                       read: "/PCV/Quote/ReadSupplierList"
                   }
               },
               change: function (e) {
                   var dataItem = e.sender.dataItem();
                   options.model.set("SupplierName", dataItem.SupplierName);
                   options.model.set("SupplierId", dataItem.SupplierId);
               }
           });
    }


    function resultDropDownEditor(container, options) {

        $('<input required data-text-field="ApproveStateName" data-value-field="ApproveStateId" data-bind="value:' + options.field + '"/>')
           .appendTo(container)
           .kendoDropDownList({
               autoBind: false,
               optionLabel: "...Select...",
               dataTextField: "ApproveState",
               dataValueField: "ApproveStateId",
               dataSource: {
                   type: "json",
                   transport: {
                       read: "/PCV/Quote/ReadApproveStatusList"
                   }
               },
               change: function (e) {
                   var dataItem = e.sender.dataItem();
                   options.model.set("ApproveState", dataItem.ApproveStateName);
               }
           });
       }

       // priceTerm DropDown Editor In Grid
       function priceTermDropDownEditor(container, options) {
           //alert('here');
           $('<input required data-text-field="PriceTermName" data-value-field="PriceTermId" data-bind="value:' + options.field + '"/>')
           .appendTo(container)
           .kendoDropDownList({
               autoBind: false,
               optionLabel: "...Select...",
               dataTextField: "PriceTermName",
               dataValueField: "PriceTermId",
               dataSource: {
                   type: "json",
                   transport: {
                       read: "/PCV/Quote/ReadPriceTermList"
                   }
               },
               change: function (e) {
                   var dataItem = e.sender.dataItem();
                   options.model.set("PriceTermName", dataItem.PriceTermName);
                   options.model.set("PriceTermId", dataItem.PriceTermId);
               }
           });
       }

       // Country DropDown Editor In Grid     
       function shipmentCountryDropDownEditor(container, options) {
           $('<input required data-text-field="CountryName" data-value-field="CountryId" data-bind="value:' + options.field + '"/>')
           .appendTo(container)
           .kendoDropDownList({
               autoBind: false,
               optionLabel: "...Select...",
               dataTextField: "CountryName",
               dataValueField: "ShipmentCountryId",
               dataSource: {
                   type: "json",
                   transport: {
                       read: "/PCV/Quote/GetCountryList"
                   }
               },
               change: function (e) {
                   var dataItem = e.sender.dataItem();
                   options.model.set("CountryName", dataItem.CountryName);
                   options.model.set("ShipmentCountryId", dataItem.ShipmentCountryId);
               }
           });
       }


//Quote Detail Kendo Grid End Here 

    //-----------------------------------------------------
</script>

@*Add New Row to Grid*@
<script type="text/javascript">
    // Add New Row To Grid
    function AddRow()
        {
            var QuoteDetGrid = $('#QuoteDetailsEditKendoGrid').data('kendoGrid');
            var dataSource = QuoteDetGrid.dataSource;

            var articleCode = $('#ArticleCode').val();
            //alert(articleCode);

            $.get(
                    "@Url.Action("AddArticleToGrid")",
                    {'articleCode':articleCode},
                    function(jresult){
                    //alert(jresult);
                        if(jresult != '')
                        {
                            if (Find_Grid_Item(jresult[0].Id))
                            {
                                alert('This Element is Allready Exists');
                                return;
                            }
                            dataSource.add({ 
                                ArticleId: jresult[0].Id,                                
                                ArticleName: jresult[0].ProductName,
                                BaseUnit: jresult[0].SamplingUnit,
                                MOQ : 0,
                                ValidityDate:0, 
                                SupplierName: "- Select One -",
                                PriceTermName: "--Select--",
                                CountryName:"--Select--",
                                ShipmentLeadTime : 0, 
                                DetailText: "Active" 
                                });
                            }
                            else{
                                $("#message").show();
                                $('#message').text(data).css({ 'color':'red' });
                                $("#message").delay(3000).hide();
                            }
                        }
                    );
        $('#ArticleCode').val('');
        }
    // Add New Row To Grid End Here 

    function Find_Grid_Item(itemId)
    {
            //alert (itemId);
        var rowNo =0;
        var gridData = $("#QuoteDetailsEditKendoGrid").data("kendoGrid").dataSource.data();

        for (var index = 0; index < gridData.length; index++) 
        {
            
            var currentDataItem = gridData[index];
            if (itemId==currentDataItem.ArticleId)
            {
                rowNo=index;
                return true;
            }
        }

    }

 
</script>

@*Save Grid Data*@
<script type="text/javascript">

    function SaveQuoteDetails() {
        //getting json data from kendo Grid
        var gridData = $("#QuoteDetailsEditKendoGrid").data("kendoGrid").dataSource.data();
        var quoteDetailList = [];
        //loop through each json data from kendo Grid
        for (var i = 0; i < gridData.length; i++) {

            var currentDataItem = gridData[i];

            var QuoteDetailViewModel = {};
            QuoteDetailViewModel.Id = currentDataItem.Id;
            QuoteDetailViewModel.QuoteId = currentDataItem.QuoteId;
            QuoteDetailViewModel.ArticleId = currentDataItem.ArticleId;
            QuoteDetailViewModel.QuoteQuantity = currentDataItem.QuoteQuantity;
            QuoteDetailViewModel.MOQ = currentDataItem.MOQ;
            QuoteDetailViewModel.ValidityDate = currentDataItem.ValidityDate;
            QuoteDetailViewModel.UnitPrice = currentDataItem.UnitPrice;
            QuoteDetailViewModel.SupplierId = currentDataItem.SupplierId;
            QuoteDetailViewModel.Origin = currentDataItem.Origin;
            QuoteDetailViewModel.ApproveState = currentDataItem.ApproveState;
            QuoteDetailViewModel.DetailText = currentDataItem.DetailText;
            quoteDetailList.push(QuoteDetailViewModel);
        }

        var postUrl = '@Url.Content("~/PCV/Quote/SetQuoteDetailsListForSave")';
        //alert(postUrl);
        var paramValue = JSON.stringify({ lstQuoteDetails: quoteDetailList });
        //alert("Test");
        alert(paramValue);

        //Post json data from kendo Grid to Controller
        $.ajax({
            url: postUrl,
            type: 'POST',
            dataType: 'json',
            data: paramValue,
            contentType: 'application/json; charset=utf-8',
            success: function (result) {
                //if (result !='') 
                //    {
                //        alert(jresult[0].TP);
                //        //TP= jresult[0].TP;
                //        $('#TP').val(result[0].TP);
                //    }
                //        alert(result);

                console.log(result);
            },
            error: function (objAjaxRequest, strError) {
                var respText = objAjaxRequest.responseText;
                console.log(respText);
            }
        });
    }

    function PreSaveQuoteDetails() {

        SaveQuoteDetails();

    }
</script>

@*On Document Ready*@
<script type="text/javascript">
    $(document).ready(function () {

        $("#ArticleCode").kendoAutoComplete({
            dataTextField: "ProductCode",
            dataSource: {
                transport: {
                    read: {
                        url: "/PCV/Quote/PopulateArticleAutoComplete/",
                        serverPaging: true,
                        type: "POST",
                        data: {
                        // json: JSON.stringify([{"ProductCode": "A001"}, {"ProductCode": "A002"}] )
                    }
                }
            }
        }
    });



});

</script>

